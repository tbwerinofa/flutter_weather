import 'dart:async';

import 'package:finishlineinsights_api/finishlineinsights_api.dart' hide League;
import 'package:league_repository/league_repository.dart';
import 'package:league_repository/src/models/season.dart';

class LeagueRepository {
  LeagueRepository({FinishLineInsightsApiClient? weatherApiClient})
      : _weatherApiClient = weatherApiClient ?? FinishLineInsightsApiClient();

  final FinishLineInsightsApiClient _weatherApiClient;

  Future<League> getLeague() async {
    final league = await _weatherApiClient.leagueFetch();
    final season = new Season(
        id: league.season.id,
        name: league.season.name,
        finYearId: league.season.finYearId,
        provinceId: league.season.provinceId,
        countryId: league.season.countryId,
        organisationIds: league.season.organisationIds,
        province: league.season.province,
        country: league.season.country,
        organisationTypeId: league.season.organisationTypeId,
        organisationId: league.season.organisationId,
        finYear: league.season.finYear);

    return League(
        totalPrizes: league.totalPrizes,
        season: season,
        organisationCount: league.organisationCount,
        /*seasonPrizes: league.seasonPrizes
            .map((value) => DashboardItem(
                id: value.id,
                finYear: value.finYear,
                group: value.group,
                name: value.name,
                ordinal: value.ordinal,
                count: value.count,
                type: value.type,
                averageCount: value.averageCount,
                dateTimeStamp: value.dateTimeStamp,
                message: value.message,
                url: value.url,
                icon: value.icon,
                finYearMonth: value.finYearMonth,
                x: value.x,
                y: value.y,
                avgPaceMilliseconds: value.avgPaceMilliseconds,
                timeRecordString: value.timeRecordString,
                timeRecord: value.timeRecord,
                averagePace: value.averagePace,
                averagePaceString: value.averagePaceString,
                minValue: value.minValue,
                maxValue: value.maxValue,
                groupCount: value.groupCount,
                documentGuid: value.documentGuid,
                description: value.description,
                timeString: value.timeString,
                amount: value.amount,
                groupOrdinal: value.groupOrdinal,
                hasChild: value.hasChild,
                folder: value.folder,
                documentPath: value.documentPath,
                documentName: value.documentName,
                groupId: value.groupId,
                gender: value.gender))
            .toList(),
        seasonRules: league.seasonRules
            .map((value) => DashboardItem(
                id: value.id,
                finYear: value.finYear,
                group: value.group,
                name: value.name,
                ordinal: value.ordinal,
                count: value.count,
                type: value.type,
                averageCount: value.averageCount,
                dateTimeStamp: value.dateTimeStamp,
                message: value.message,
                url: value.url,
                icon: value.icon,
                finYearMonth: value.finYearMonth,
                x: value.x,
                y: value.y,
                avgPaceMilliseconds: value.avgPaceMilliseconds,
                timeRecordString: value.timeRecordString,
                timeRecord: value.timeRecord,
                averagePace: value.averagePace,
                averagePaceString: value.averagePaceString,
                minValue: value.minValue,
                maxValue: value.maxValue,
                groupCount: value.groupCount,
                documentGuid: value.documentGuid,
                description: value.description,
                timeString: value.timeString,
                amount: value.amount,
                groupOrdinal: value.groupOrdinal,
                hasChild: value.hasChild,
                folder: value.folder,
                documentPath: value.documentPath,
                documentName: value.documentName,
                groupId: value.groupId,
                gender: value.gender))
            .toList(),
        weightingFactors: league.weightingFactors
            .map((value) => DashboardItem(
                id: value.id,
                finYear: value.finYear,
                group: value.group,
                name: value.name,
                ordinal: value.ordinal,
                count: value.count,
                type: value.type,
                averageCount: value.averageCount,
                dateTimeStamp: value.dateTimeStamp,
                message: value.message,
                url: value.url,
                icon: value.icon,
                finYearMonth: value.finYearMonth,
                x: value.x,
                y: value.y,
                avgPaceMilliseconds: value.avgPaceMilliseconds,
                timeRecordString: value.timeRecordString,
                timeRecord: value.timeRecord,
                averagePace: value.averagePace,
                averagePaceString: value.averagePaceString,
                minValue: value.minValue,
                maxValue: value.maxValue,
                groupCount: value.groupCount,
                documentGuid: value.documentGuid,
                description: value.description,
                timeString: value.timeString,
                amount: value.amount,
                groupOrdinal: value.groupOrdinal,
                hasChild: value.hasChild,
                folder: value.folder,
                documentPath: value.documentPath,
                documentName: value.documentName,
                groupId: value.groupId,
                gender: value.gender))
            .toList(),
        seasonRaces: league.seasonRaces
            .map((value) => DashboardItem(
                id: value.id,
                finYear: value.finYear,
                group: value.group,
                name: value.name,
                ordinal: value.ordinal,
                count: value.count,
                type: value.type,
                averageCount: value.averageCount,
                dateTimeStamp: value.dateTimeStamp,
                message: value.message,
                url: value.url,
                icon: value.icon,
                finYearMonth: value.finYearMonth,
                x: value.x,
                y: value.y,
                avgPaceMilliseconds: value.avgPaceMilliseconds,
                timeRecordString: value.timeRecordString,
                timeRecord: value.timeRecord,
                averagePace: value.averagePace,
                averagePaceString: value.averagePaceString,
                minValue: value.minValue,
                maxValue: value.maxValue,
                groupCount: value.groupCount,
                documentGuid: value.documentGuid,
                description: value.description,
                timeString: value.timeString,
                amount: value.amount,
                groupOrdinal: value.groupOrdinal,
                hasChild: value.hasChild,
                folder: value.folder,
                documentPath: value.documentPath,
                documentName: value.documentName,
                groupId: value.groupId,
                gender: value.gender))
            .toList(),
        seasonDocuments: league.seasonDocuments
            .map((value) => SeasonDocument(
                id: value.id,
                seasonId: value.seasonId,
                isFeatured: value.isFeatured,
                documentName: value.documentName,
                seasonName: value.seasonName,
                documentPath: value.documentPath,
                documentGuid: value.documentGuid,
                folder: value.folder,
                ordinal: value.ordinal))
            .toList(),
        aggregateLogs: league.aggregateLogs
            .map((value) => DashboardItem(
                id: value.id,
                finYear: value.finYear,
                group: value.group,
                name: value.name,
                ordinal: value.ordinal,
                count: value.count,
                type: value.type,
                averageCount: value.averageCount,
                dateTimeStamp: value.dateTimeStamp,
                message: value.message,
                url: value.url,
                icon: value.icon,
                finYearMonth: value.finYearMonth,
                x: value.x,
                y: value.y,
                avgPaceMilliseconds: value.avgPaceMilliseconds,
                timeRecordString: value.timeRecordString,
                timeRecord: value.timeRecord,
                averagePace: value.averagePace,
                averagePaceString: value.averagePaceString,
                minValue: value.minValue,
                maxValue: value.maxValue,
                groupCount: value.groupCount,
                documentGuid: value.documentGuid,
                description: value.description,
                timeString: value.timeString,
                amount: value.amount,
                groupOrdinal: value.groupOrdinal,
                hasChild: value.hasChild,
                folder: value.folder,
                documentPath: value.documentPath,
                documentName: value.documentName,
                groupId: value.groupId,
                gender: value.gender))
            .toList(),*/
        documentPath: league.documentPath);
  }
}
